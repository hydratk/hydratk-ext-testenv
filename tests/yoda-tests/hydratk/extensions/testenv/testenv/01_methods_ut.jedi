Test-Scenario-1:
  Id: ts_01
  Path: hydratk/extensions/testenv/01_methods_ut.jedi
  Name: ts_init_extension
  Desc: Test _init_extension method
  Author: Petr Rasek <bowman@hydratk.org>
  Version: 0.1
  
  Pre-Req: |
    from hydratk.core.masterhead import MasterHead
  
  Test-Case-1:
    Id: tc_01
    Name: tc_init
    Desc: Initialize extension
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_init
      Desc: Initialize extension
      
      Test: |
        mh = MasterHead.get_head()
        ext = mh._ext['TestEnv']
        ext._ext_id = ext._ext_name = None
        ext._init_extension()
        res = [ext._ext_id, ext._ext_name]
      
      Validate: |
        this.test_result = str(res)
        exp = ['testenv', 'TestEnv']
        assert (res == exp), '_ext_id, _ext_name = {0}'.format(exp)
        
Test-Scenario-2:
  Id: ts_02
  Path: hydratk/extensions/testenv/01_methods_ut.jedi
  Name: ts_install_db_fc
  Desc: Test install_db_fc method
  Author: Petr Rasek <bowman@hydratk.org>
  Version: 0.1
  
  Pre-Req: |
    from hydratk.core.masterhead import MasterHead
    from os import remove, path
    from sys import prefix
    from time import time
  
  Test-Case-1:
    Id: tc_01
    Name: tc_install
    Desc: Install database
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_install
      Desc: Install database
      
      Test: |
        mh = MasterHead.get_head()
        ext = mh._ext['TestEnv']
        mh._config['Extensions']['TestEnv']['db_file'] = 'test.db3'
        ext.install_db_fc()
        file = prefix+'/var/local/hydratk/testenv/test.db3'
        res = (path.exists(file))
      
      Validate: |
        this.test_result = res
        assert (res), 'file {0} created'.format(file)
        
    Test-Condition-2: 
      Id: tco_02
      Name: tco_reinstall
      Desc: Reinstall database
      
      Test: |
        now = time()
        ext.install_db_fc()
        res = (path.exists(file))
      
      Validate: |
        this.test_result = res
        assert (res), 'file {0} created'.format(file)
        this.test_result = res = path.getmtime(file)
        assert (res > now), 'file is rewritten' 
        mh._config['Extensions']['TestEnv']['db_file'] = 'testenv.db3'
        remove(file) 
        
Test-Scenario-3:
  Id: ts_03
  Path: hydratk/extensions/testenv/01_methods_ut.jedi
  Name: ts_register_htk_actions
  Desc: Test method _register_htk_actions
  Author: Petr Rasek <bowman@hydratk.org>
  Version: 0.1
  
  Pre-Req: |
    from yodalib.hydratk.core.testhead import TestHead
    import yodalib.hydratk.core.commandopt as commandopt           
  
  Test-Case-1:
    Id: tc_01
    Name: tc_register_htk_actions
    Desc: Register Hydra actions
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_register
      Desc: Register 
      
      Test: |
        th = TestHead()     
        ext = th._ext['TestEnv']  
        th.clear_cmd()
        ext._register_htk_actions()
        res = th._cmd_hooks
        
      Validate: |         
        this.test_result = str(res)
        exp = ['te-install', 'te-run']
        assert (sorted(res.keys()) == exp), '_cmd_hooks = {0}'.format(exp)
        th.clear_cmd()
        
Test-Scenario-4:
  Id: ts_04
  Path: hydratk/extensions/testenv/01_methods_ut.jedi
  Name: ts_register_standalone_actions
  Desc: Test method _register_standalone_actions
  Author: Petr Rasek <bowman@hydratk.org>
  Version: 0.1
  
  Pre-Req: |
    from yodalib.hydratk.core.testhead import TestHead
    import yodalib.hydratk.core.commandopt as commandopt           
  
  Test-Case-1:
    Id: tc_01
    Name: tc_register_standalone_actions
    Desc: Register standalone actions
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_register
      Desc: Register   
      
      Test: |
        th = TestHead()
        ext = th._ext['TestEnv']
        th.clear_cmd()
        ext._register_standalone_actions()
        res = th._cmd_hooks
      
      Validate: |   
        this.test_result = str(res)
        exp = ['install', 'run']
        assert (sorted(res.keys()) == exp), '_cmd_hooks = {0}'.format(exp)  
        res = commandopt.long_opt['testenv']
        this.test_result = str(res)
        exp = ['config', 'debug', 'debug-channel', 'force', 'home', 'interactive', 'language', 'run-mode']
        assert (sorted(res) == exp), 'long_opt = {0}'.format(exp)             
        th.clear_cmd()     
        
Test-Scenario-5:
  Id: ts_05
  Path: hydratk/extensions/testenv/01_methods_ut.jedi
  Name: ts_register_actions
  Desc: Test method _register_actions
  Author: Petr Rasek <bowman@hydratk.org>
  Version: 0.1
  
  Pre-Req: |
    from yodalib.hydratk.core.testhead import TestHead
    import yodalib.hydratk.core.commandopt as commandopt           
  
  Test-Case-1:
    Id: tc_01
    Name: tc_register_actions
    Desc: Register actions
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_htk
      Desc: Profile htk
      
      Test: |
        th = TestHead()
        ext = th._ext['TestEnv']
        th.clear_cmd()
        th.cli_cmdopt_profile = 'htk'
        ext._register_actions()
        res = th._cmd_hooks        
      
      Validate: |  
        this.test_result = str(res)
        exp = ['te-install', 'te-run']
        assert (sorted(res.keys()) == exp), '_cmd_hooks = {0}'.format(exp)
        th.clear_cmd()    
        
    Test-Condition-2: 
      Id: tco_02
      Name: tco_testenv
      Desc: Profile testenv
      
      Test: |
        th = TestHead()
        ext = th._ext['TestEnv']
        th.clear_cmd()      
        th.cli_cmdopt_profile = 'testenv'
        ext._register_actions()
        res = th._cmd_hooks        
      
      Validate: |  
        this.test_result = str(res)
        exp = ['install', 'run']
        assert (sorted(res.keys()) == exp), '_cmd_hooks = {0}'.format(exp)
        res = commandopt.long_opt['testenv']
        this.test_result = str(res)
        exp = ['config', 'debug', 'debug-channel', 'force', 'home', 'interactive', 'language', 'run-mode']
        assert (sorted(res) == exp), 'long_opt = {0}'.format(exp)           
        th.clear_cmd()                      